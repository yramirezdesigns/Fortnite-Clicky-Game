{"ast":null,"code":"var _jsxFileName = \"/Users/yolandaramirez/reactpractice/src/App.js\";\nimport * as React from \"react\";\nimport Home from \"./pages/Home\";\nimport AlertContext from \"./utils/AlertContext\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      display: false,\n      theme: \"success\",\n      onClick: (theme, display) => {\n        this.setState({\n          theme,\n          display\n        });\n      }\n    };\n  }\n\n  render() {\n    // App component that provides initial context values\n    // Here we are overwritting the context object to be equal to the state of App\n    return React.createElement(AlertContext.Provider, {\n      value: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(Home, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/yolandaramirez/reactpractice/src/App.js"],"names":["React","Home","AlertContext","App","Component","state","display","theme","onClick","setState","render"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,KAAK,EAAE,SAFD;AAGNC,MAAAA,OAAO,EAAE,CAACD,KAAD,EAAQD,OAAR,KAAoB;AAC3B,aAAKG,QAAL,CAAc;AAAEF,UAAAA,KAAF;AAASD,UAAAA;AAAT,SAAd;AACD;AALK,KADwB;AAAA;;AAQhCI,EAAAA,MAAM,GAAG;AACP;AACA;AACA,WACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAE,KAAKL,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAhB+B;;AAmBlC,eAAeF,GAAf","sourcesContent":["import * as React from \"react\";\nimport Home from \"./pages/Home\";\nimport AlertContext from \"./utils/AlertContext\";\n\nclass App extends React.Component {\n  state = {\n    display: false,\n    theme: \"success\",\n    onClick: (theme, display) => {\n      this.setState({ theme, display });\n    }\n  };\n  render() {\n    // App component that provides initial context values\n    // Here we are overwritting the context object to be equal to the state of App\n    return (\n      <AlertContext.Provider value={this.state}>\n        <Home />\n      </AlertContext.Provider>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}